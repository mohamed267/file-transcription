options {
    STATIC = false; // Generate a non-static parser
}

PARSER_BEGIN(TRANSB)
import java.io.*;
public class TRANSB {
  public static void main(String[] args) {
    try {
      TRANSB parser = new TRANSB(System.in);
      parser.TexteDoc2();
      System.out.println("VALIDE");
    } catch (ParseException e) {
      System.out.println("PAS VALIDE");
    }
  }
}


PARSER_END(TRANSB)

TOKEN : {
  <AT: "@" > |
  <PLUS: "+" >| 
  <MINUS: "-" >|
  <COMMA: "," >|
  <INT: (["0"-"9"])+ >|
  <REAL: (["0"-"9"])+ "," (["0"-"9"])* >|
  <COMMENT: "/*" (~["*"] | ("*" ~["/"]))* "*/" >|
  <WORD: (["0"-"9"])*["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9"])*>
}


void TexteDoc2() :
{}
{
  (EnsemblesLignes() | <EOF>)
}
void EnsemblesLignes() :
{}
{
  MultilignesValides() SuitEnsble() |  Comment() SuitEnsble()
}


void SuitEnsble() :
{}
{
  EnsemblesLignes() | {}
}


void MultilignesValides() :
{}
{
  LigneValide() SuitMultiligne()
}

void SuitMultiligne() :
{}
{
  MultilignesValides() | {}
}


void LigneValide() :
{}
{
  <AT> Contenuligne() <"\n">
}


void Contenuligne() :
{}
{
  Mots() SerieMots() 
}


void SerieMots() :
{}
{
  Contenuligne() | {}
}


void Mots() :
{}
{
  Entier() | Reel() | Comment()
}


void Entier() :
{}
{
  (
    <INT> {
        try { Integer.parseInt(token.image);} 
        catch (NumberFormatException e) {throw new ParseException();}
    }
  )
}

void Reel() :
{}
{
  (<REAL> {try { Double.parseDouble(token.image);} catch (NumberFormatException e) {throw new ParseException();}})
}

void Comment() :
{}
{
  (<COMMENT>)
}




